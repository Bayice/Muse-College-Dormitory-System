{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kant\\\\Desktop\\\\my-react-project\\\\src\\\\SelectionOutput.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './SelectionOutput.css';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SelectionOutput() {\n  _s();\n  const location = useLocation();\n  const roomsData = location.state ? location.state.roomsData : null;\n\n  // Access the rooms array properly\n  const rooms = roomsData ? roomsData.rooms : [];\n\n  // Function to group and sort rooms by building and floor\n  const groupAndSortRooms = rooms => {\n    const grouped = {};\n    rooms.forEach(room => {\n      const building = room[0].charAt(0); // Assume first char is the building\n      const floor = parseInt(room[0].substring(1, 2), 10); // Assume second char is the floor\n      const key = `Bld. ${building}, Floor ${floor}`;\n      if (!grouped[building]) {\n        grouped[building] = {};\n      }\n      if (!grouped[building][floor]) {\n        grouped[building][floor] = [];\n      }\n      grouped[building][floor].push(room);\n    });\n\n    // Sorting buildings and floors\n    const sortedKeys = Object.keys(grouped).sort().reduce((acc, building) => {\n      acc[building] = Object.keys(grouped[building]).sort((a, b) => a - b).reduce((floorAcc, floor) => {\n        floorAcc[floor] = grouped[building][floor];\n        return floorAcc;\n      }, {});\n      return acc;\n    }, {});\n    return sortedKeys;\n  };\n  const groupedRooms = groupAndSortRooms(rooms);\n\n  // Render grouped and sorted rooms\n  const renderRooms = () => {\n    return Object.entries(groupedRooms).map(([building, floors], idx) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: Object.entries(floors).map(([floor, rooms]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: `Bld. ${building}, Floor ${floor}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), rooms.map((room, roomIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkbox-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: room[0],\n            name: room[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: room[0],\n            children: room[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 17\n          }, this)]\n        }, roomIdx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this))]\n      }, floor, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this))\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [rooms.length > 0 ? renderRooms() : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No rooms available or selection criteria not met.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-button\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(SelectionOutput, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = SelectionOutput;\nexport default SelectionOutput;\nvar _c;\n$RefreshReg$(_c, \"SelectionOutput\");","map":{"version":3,"names":["React","useLocation","jsxDEV","_jsxDEV","SelectionOutput","_s","location","roomsData","state","rooms","groupAndSortRooms","grouped","forEach","room","building","charAt","floor","parseInt","substring","key","push","sortedKeys","Object","keys","sort","reduce","acc","a","b","floorAcc","groupedRooms","renderRooms","entries","map","floors","idx","Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","roomIdx","className","type","id","name","htmlFor","length","_c","$RefreshReg$"],"sources":["C:/Users/kant/Desktop/my-react-project/src/SelectionOutput.js"],"sourcesContent":["import React from 'react';\r\nimport './SelectionOutput.css';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nfunction SelectionOutput() {\r\n  const location = useLocation();\r\n  const roomsData = location.state ? location.state.roomsData : null;\r\n\r\n  // Access the rooms array properly\r\n  const rooms = roomsData ? roomsData.rooms : [];\r\n\r\n  // Function to group and sort rooms by building and floor\r\n  const groupAndSortRooms = (rooms) => {\r\n    const grouped = {};\r\n    rooms.forEach(room => {\r\n      const building = room[0].charAt(0); // Assume first char is the building\r\n      const floor = parseInt(room[0].substring(1, 2), 10); // Assume second char is the floor\r\n      const key = `Bld. ${building}, Floor ${floor}`;\r\n\r\n      if (!grouped[building]) {\r\n        grouped[building] = {};\r\n      }\r\n      if (!grouped[building][floor]) {\r\n        grouped[building][floor] = [];\r\n      }\r\n      grouped[building][floor].push(room);\r\n    });\r\n\r\n    // Sorting buildings and floors\r\n    const sortedKeys = Object.keys(grouped).sort().reduce((acc, building) => {\r\n      acc[building] = Object.keys(grouped[building]).sort((a, b) => a - b).reduce((floorAcc, floor) => {\r\n        floorAcc[floor] = grouped[building][floor];\r\n        return floorAcc;\r\n      }, {});\r\n      return acc;\r\n    }, {});\r\n\r\n    return sortedKeys;\r\n  };\r\n\r\n  const groupedRooms = groupAndSortRooms(rooms);\r\n\r\n  // Render grouped and sorted rooms\r\n  const renderRooms = () => {\r\n    return Object.entries(groupedRooms).map(([building, floors], idx) => (\r\n      <React.Fragment key={idx}>\r\n        {Object.entries(floors).map(([floor, rooms]) => (\r\n          <div key={floor}>\r\n            <h1>{`Bld. ${building}, Floor ${floor}`}</h1>\r\n            {rooms.map((room, roomIdx) => (\r\n              <div className=\"checkbox-row\" key={roomIdx}>\r\n                <input type=\"checkbox\" id={room[0]} name={room[0]} />\r\n                <label htmlFor={room[0]}>{room[0]}</label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </React.Fragment>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {rooms.length > 0 ? renderRooms() : <p>No rooms available or selection criteria not met.</p>}\r\n      <button className=\"submit-button\">Submit</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SelectionOutput;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}