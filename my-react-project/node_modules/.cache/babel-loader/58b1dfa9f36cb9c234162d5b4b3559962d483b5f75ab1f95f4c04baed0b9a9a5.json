{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kant\\\\Desktop\\\\my-react-project\\\\src\\\\SelectionOutput.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport styles from './SelectionOutput.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SelectionOutput() {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate(); // Hook to perform navigation\n  const rooms = location.state && location.state.roomsData && Array.isArray(location.state.roomsData.rooms) ? location.state.roomsData.rooms : [];\n  const [selectedBuilding, setSelectedBuilding] = useState('');\n  const [checkedRooms, setCheckedRooms] = useState({});\n  const buildings = rooms.reduce((acc, room) => {\n    const building = room[0].charAt(0);\n    if (!acc.includes(building)) {\n      acc.push(building);\n    }\n    return acc;\n  }, []).sort();\n  const filteredRooms = rooms.filter(room => room[0].charAt(0) === selectedBuilding);\n  const handleSubmit = async () => {\n    // Find the selected room to send to the server\n    const selectedRoomEntry = Object.entries(checkedRooms).find(([key, value]) => value);\n    if (selectedRoomEntry) {\n      // Extract the room index from the selectedRoomEntry\n      const [selectedRoomIndex] = selectedRoomEntry;\n\n      // Prepare the room data to be sent based on the selected index\n      const roomToSend = filteredRooms[parseInt(selectedRoomIndex)][0];\n      console.log(\"Sending room data to server:\", {\n        Room_ID: roomToSend\n      }); // Log the data being sent\n\n      try {\n        const response = await fetch('http://localhost:5000/view_room', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            Room_ID: roomToSend\n          }) // Send Room_ID matching backend expectation\n        });\n        if (response.ok) {\n          console.log(\"Room data successfully sent and response received:\", await response.json()); // Log server response\n          navigate('/Dom_select'); // Navigate to /Dom_select if successful\n        } else {\n          console.error('Failed to send room data:', response.status);\n        }\n      } catch (error) {\n        console.error('Error sending room data:', error);\n      }\n    } else {\n      alert('Please select a room before submitting.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.sidebar,\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: buildings.map((building, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => setSelectedBuilding(building),\n          className: styles.building,\n          children: [\"Muse \", building]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.roomsDisplay,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"\\u6B22\\u8FCE\\u6765\\u5230\\u601D\\u5EF7 \", selectedBuilding, \"\\u680B\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), selectedBuilding === '' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.noRooms,\n        children: \"\\u8BF7\\u9009\\u62E9\\u4F60\\u7684\\u623F\\u95F4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this) : filteredRooms.length > 0 ? filteredRooms.map((room, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.room,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: `room-${idx}`,\n          name: `room-${idx}`,\n          checked: !!checkedRooms[idx],\n          onChange: () => setCheckedRooms(prev => ({\n            ...prev,\n            [idx]: !prev[idx]\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `room-${idx}`,\n          children: room[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.noRooms,\n        children: \"No rooms available in this building.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.submitButton,\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(SelectionOutput, \"YsJYGQdigRRRtqlX8P+qwIbGOpA=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = SelectionOutput;\nexport default SelectionOutput;\nvar _c;\n$RefreshReg$(_c, \"SelectionOutput\");","map":{"version":3,"names":["React","useState","useLocation","useNavigate","styles","jsxDEV","_jsxDEV","SelectionOutput","_s","location","navigate","rooms","state","roomsData","Array","isArray","selectedBuilding","setSelectedBuilding","checkedRooms","setCheckedRooms","buildings","reduce","acc","room","building","charAt","includes","push","sort","filteredRooms","filter","handleSubmit","selectedRoomEntry","Object","entries","find","key","value","selectedRoomIndex","roomToSend","parseInt","console","log","Room_ID","response","fetch","method","headers","body","JSON","stringify","ok","json","error","status","alert","className","container","children","sidebar","map","index","onClick","fileName","_jsxFileName","lineNumber","columnNumber","roomsDisplay","noRooms","length","idx","type","id","name","checked","onChange","prev","htmlFor","submitButton","_c","$RefreshReg$"],"sources":["C:/Users/kant/Desktop/my-react-project/src/SelectionOutput.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport styles from './SelectionOutput.module.css';\r\n\r\nfunction SelectionOutput() {\r\n  const location = useLocation();\r\n  const navigate = useNavigate(); // Hook to perform navigation\r\n  const rooms = location.state && location.state.roomsData && Array.isArray(location.state.roomsData.rooms)\r\n                 ? location.state.roomsData.rooms\r\n                 : [];\r\n\r\n  const [selectedBuilding, setSelectedBuilding] = useState('');\r\n  const [checkedRooms, setCheckedRooms] = useState({});\r\n\r\n  const buildings = rooms.reduce((acc, room) => {\r\n    const building = room[0].charAt(0);\r\n    if (!acc.includes(building)) {\r\n      acc.push(building);\r\n    }\r\n    return acc;\r\n  }, []).sort();\r\n\r\n  const filteredRooms = rooms.filter(room => room[0].charAt(0) === selectedBuilding);\r\n\r\n  const handleSubmit = async () => {\r\n    // Find the selected room to send to the server\r\n    const selectedRoomEntry = Object.entries(checkedRooms).find(([key, value]) => value);\r\n\r\n    if (selectedRoomEntry) {\r\n        // Extract the room index from the selectedRoomEntry\r\n        const [selectedRoomIndex] = selectedRoomEntry;\r\n\r\n        // Prepare the room data to be sent based on the selected index\r\n        const roomToSend = filteredRooms[parseInt(selectedRoomIndex)][0];\r\n\r\n        console.log(\"Sending room data to server:\", { Room_ID: roomToSend }); // Log the data being sent\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:5000/view_room', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ Room_ID: roomToSend }) // Send Room_ID matching backend expectation\r\n            });\r\n\r\n            if (response.ok) {\r\n                console.log(\"Room data successfully sent and response received:\", await response.json()); // Log server response\r\n                navigate('/Dom_select'); // Navigate to /Dom_select if successful\r\n            } else {\r\n                console.error('Failed to send room data:', response.status);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error sending room data:', error);\r\n        }\r\n    } else {\r\n        alert('Please select a room before submitting.');\r\n    }\r\n};\r\n\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.sidebar}>\r\n        <ul>\r\n          {buildings.map((building, index) => (\r\n            <li key={index} onClick={() => setSelectedBuilding(building)} className={styles.building}>\r\n              Muse {building}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div className={styles.roomsDisplay}>\r\n        <h1>欢迎来到思廷 {selectedBuilding}栋</h1>\r\n        {selectedBuilding === '' ? (\r\n          <p className={styles.noRooms}>请选择你的房间</p>\r\n        ) : (\r\n          filteredRooms.length > 0 ? filteredRooms.map((room, idx) => (\r\n            <div className={styles.room} key={idx}>\r\n              <input\r\n                type=\"checkbox\"\r\n                id={`room-${idx}`}\r\n                name={`room-${idx}`}\r\n                checked={!!checkedRooms[idx]}\r\n                onChange={() => setCheckedRooms(prev => ({ ...prev, [idx]: !prev[idx] }))}\r\n              />\r\n              <label htmlFor={`room-${idx}`}>{room[0]}</label>\r\n            </div>\r\n          )) : <p className={styles.noRooms}>No rooms available in this building.</p>\r\n        )}\r\n      </div>\r\n      <button className={styles.submitButton} onClick={handleSubmit}>Submit</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SelectionOutput;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,OAAOC,MAAM,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAMQ,QAAQ,GAAGP,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMQ,KAAK,GAAGF,QAAQ,CAACG,KAAK,IAAIH,QAAQ,CAACG,KAAK,CAACC,SAAS,IAAIC,KAAK,CAACC,OAAO,CAACN,QAAQ,CAACG,KAAK,CAACC,SAAS,CAACF,KAAK,CAAC,GACxFF,QAAQ,CAACG,KAAK,CAACC,SAAS,CAACF,KAAK,GAC9B,EAAE;EAEnB,MAAM,CAACK,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEpD,MAAMmB,SAAS,GAAGT,KAAK,CAACU,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;IAC5C,MAAMC,QAAQ,GAAGD,IAAI,CAAC,CAAC,CAAC,CAACE,MAAM,CAAC,CAAC,CAAC;IAClC,IAAI,CAACH,GAAG,CAACI,QAAQ,CAACF,QAAQ,CAAC,EAAE;MAC3BF,GAAG,CAACK,IAAI,CAACH,QAAQ,CAAC;IACpB;IACA,OAAOF,GAAG;EACZ,CAAC,EAAE,EAAE,CAAC,CAACM,IAAI,CAAC,CAAC;EAEb,MAAMC,aAAa,GAAGlB,KAAK,CAACmB,MAAM,CAACP,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,CAACE,MAAM,CAAC,CAAC,CAAC,KAAKT,gBAAgB,CAAC;EAElF,MAAMe,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B;IACA,MAAMC,iBAAiB,GAAGC,MAAM,CAACC,OAAO,CAAChB,YAAY,CAAC,CAACiB,IAAI,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAKA,KAAK,CAAC;IAEpF,IAAIL,iBAAiB,EAAE;MACnB;MACA,MAAM,CAACM,iBAAiB,CAAC,GAAGN,iBAAiB;;MAE7C;MACA,MAAMO,UAAU,GAAGV,aAAa,CAACW,QAAQ,CAACF,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;MAEhEG,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE;QAAEC,OAAO,EAAEJ;MAAW,CAAC,CAAC,CAAC,CAAC;;MAEtE,IAAI;QACA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;UAC5DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEP,OAAO,EAAEJ;UAAW,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC;QAEF,IAAIK,QAAQ,CAACO,EAAE,EAAE;UACbV,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAE,MAAME,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;UAC1F1C,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;QAC7B,CAAC,MAAM;UACH+B,OAAO,CAACY,KAAK,CAAC,2BAA2B,EAAET,QAAQ,CAACU,MAAM,CAAC;QAC/D;MACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;QACZZ,OAAO,CAACY,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MACpD;IACJ,CAAC,MAAM;MACHE,KAAK,CAAC,yCAAyC,CAAC;IACpD;EACJ,CAAC;EAGC,oBACEjD,OAAA;IAAKkD,SAAS,EAAEpD,MAAM,CAACqD,SAAU;IAAAC,QAAA,gBAC/BpD,OAAA;MAAKkD,SAAS,EAAEpD,MAAM,CAACuD,OAAQ;MAAAD,QAAA,eAC7BpD,OAAA;QAAAoD,QAAA,EACGtC,SAAS,CAACwC,GAAG,CAAC,CAACpC,QAAQ,EAAEqC,KAAK,kBAC7BvD,OAAA;UAAgBwD,OAAO,EAAEA,CAAA,KAAM7C,mBAAmB,CAACO,QAAQ,CAAE;UAACgC,SAAS,EAAEpD,MAAM,CAACoB,QAAS;UAAAkC,QAAA,GAAC,OACnF,EAAClC,QAAQ;QAAA,GADPqC,KAAK;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACN5D,OAAA;MAAKkD,SAAS,EAAEpD,MAAM,CAAC+D,YAAa;MAAAT,QAAA,gBAClCpD,OAAA;QAAAoD,QAAA,GAAI,uCAAO,EAAC1C,gBAAgB,EAAC,QAAC;MAAA;QAAA+C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAClClD,gBAAgB,KAAK,EAAE,gBACtBV,OAAA;QAAGkD,SAAS,EAAEpD,MAAM,CAACgE,OAAQ;QAAAV,QAAA,EAAC;MAAO;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,GAEzCrC,aAAa,CAACwC,MAAM,GAAG,CAAC,GAAGxC,aAAa,CAAC+B,GAAG,CAAC,CAACrC,IAAI,EAAE+C,GAAG,kBACrDhE,OAAA;QAAKkD,SAAS,EAAEpD,MAAM,CAACmB,IAAK;QAAAmC,QAAA,gBAC1BpD,OAAA;UACEiE,IAAI,EAAC,UAAU;UACfC,EAAE,EAAG,QAAOF,GAAI,EAAE;UAClBG,IAAI,EAAG,QAAOH,GAAI,EAAE;UACpBI,OAAO,EAAE,CAAC,CAACxD,YAAY,CAACoD,GAAG,CAAE;UAC7BK,QAAQ,EAAEA,CAAA,KAAMxD,eAAe,CAACyD,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAE,CAACN,GAAG,GAAG,CAACM,IAAI,CAACN,GAAG;UAAE,CAAC,CAAC;QAAE;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3E,CAAC,eACF5D,OAAA;UAAOuE,OAAO,EAAG,QAAOP,GAAI,EAAE;UAAAZ,QAAA,EAAEnC,IAAI,CAAC,CAAC;QAAC;UAAAwC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GARhBI,GAAG;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAShC,CACN,CAAC,gBAAG5D,OAAA;QAAGkD,SAAS,EAAEpD,MAAM,CAACgE,OAAQ;QAAAV,QAAA,EAAC;MAAoC;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAC3E;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACN5D,OAAA;MAAQkD,SAAS,EAAEpD,MAAM,CAAC0E,YAAa;MAAChB,OAAO,EAAE/B,YAAa;MAAA2B,QAAA,EAAC;IAAM;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3E,CAAC;AAEV;AAAC1D,EAAA,CA1FQD,eAAe;EAAA,QACLL,WAAW,EACXC,WAAW;AAAA;AAAA4E,EAAA,GAFrBxE,eAAe;AA4FxB,eAAeA,eAAe;AAAC,IAAAwE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}